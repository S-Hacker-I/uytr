"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadYtDlp = void 0;
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const fs_1 = (0, tslib_1.__importDefault)(require("fs"));
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const util_1 = require("util");
const utilities_1 = require("./utilities");
/**
 * Downloads the latest version of `yt-dlp` to the specified directory.
 * The downloaded file will be either `yt-dlp` or `yt-dlp.exe` depending on the platform.
 *
 * If the file already exists, the download will only occur if the existing version is older than
 * the latest version.
 *
 * @param directory Directory to download to.
 * @param logger Progress logger, defaults to console. Provide `null` to disable logging.
 * @returns Promise resolving `true` if the download was attempted and completed,
 *          or `false` if the latest version is already present.
 */
async function downloadYtDlp(directory, logger = console) {
    const ytDlpFilename = process.platform === 'win32' ? 'yt-dlp.exe' : 'yt-dlp';
    const ytDlpPath = path_1.default.join(directory, ytDlpFilename);
    const releaseJsonPromise = (0, utilities_1.downloadJson)('https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest');
    if (await (0, utilities_1.existsAsync)(ytDlpPath)) {
        const installedVersion = await getInstalledVersion(ytDlpPath, logger);
        if (installedVersion && installedVersion === (await releaseJsonPromise).tag_name) {
            logger === null || logger === void 0 ? void 0 : logger.info('yt-dlp is already up to date');
            return false;
        }
        logger === null || logger === void 0 ? void 0 : logger.info('Updating yt-dlp...');
    }
    else {
        logger === null || logger === void 0 ? void 0 : logger.info('Downloading yt-dlp...');
    }
    const ytDlpUrl = (await releaseJsonPromise).assets.find((asset) => asset.name === ytDlpFilename).browser_download_url;
    await (0, utilities_1.downloadFile)(ytDlpUrl, directory);
    if (process.platform !== 'win32') {
        await fs_1.default.promises.chmod(ytDlpPath, '755');
    }
    logger === null || logger === void 0 ? void 0 : logger.info('yt-dlp download complete');
    return true;
}
exports.downloadYtDlp = downloadYtDlp;
async function getInstalledVersion(ytDlpPath, logger) {
    try {
        let execPath = ytDlpPath;
        if (process.platform !== 'win32' && !ytDlpPath.includes('/')) {
            execPath = './' + execPath;
        }
        const { stdout } = await (0, util_1.promisify)(child_process_1.execFile)(execPath, ['--version']);
        return stdout.trim();
    }
    catch (_a) {
        logger === null || logger === void 0 ? void 0 : logger.error('Failed to read installed yt-dlp version');
        return null;
    }
}
//# sourceMappingURL=index.js.map